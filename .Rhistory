plot_resid(rf_final_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_daily/%s" , model_abbr)
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
SAT_product <- c("OMI" , "TROPOMI")[2]
rf_final_prediction <- read_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# residual diagnostic plots
plot_resid(rf_final_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
source("2_scripts/utils_model-eval.R")
model_name <- "Random forest"
model_abbr <- "RF"
SAT_product <- c("OMI" , "TROPOMI")[1]
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_monthly/observed-predicted"
rf_final_prediction <- read_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# residual diagnostic plots
plot_resid(rf_final_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_monthly/%s" , model_abbr)
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
model_name <- "Random forest"
model_abbr <- "RF"
SAT_product <- c("OMI" , "TROPOMI")[2]
rf_final_prediction <- read_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
plot_resid(rf_final_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
library(Metrics)
library(GWmodel)
source("2_scripts/utils_model-eval.R")
# =====================================
# load datasets
# =====================================
# training data
data_annual <- read_csv("1_data/processed/cleaned/extracted/annual_scaled.csv")
# cross validation
{
in_filepath_CV <- list.files("1_data/processed/cleaned/extracted/" , "CV.shp$" , full.names = TRUE)
sites_CV <- st_read(in_filepath_CV) %>%
rename(Station_name = Station)
k_fold <- in_filepath_CV %>%
str_extract("\\d+-fold") %>% str_extract("\\d+") %>%
as.integer()
}
# implement the CV design in the training data
data_annual <- data_annual %>%
inner_join(sites_CV , by = "Station_name") %>% # this also excludes the 3 sites that are outside Switzerland and was not counted in the CV groups
select(-geometry)
# Switzerland shapefile
CH <- st_read("1_data/raw/Switzerland_shapefile/CHE_adm0.shp") %>%
st_transform(st_crs(2056))
# //////////////////////////////////////////////////////////////////////////
# model fitting
# //////////////////////////////////////////////////////////////////////////
model_name <- "Geographically weighted regression"
model_abbr <- "GWR"
SAT_product <- c("spatial" , "OMI" , "TROPOMI")[1]
# =====================================
# SLR model formulas
# =====================================
# using the variables from the SLR results (SLR summary table)
formula_SLR_gwr <- read_csv(sprintf("3_results/output-data/model_annual/SLR_summary/%s.csv" , SAT_product)) %>%
select(term) %>%
filter(term != "(Intercept)") %>%
unlist %>%
unname() %>%
paste(collapse = "+") %>%
sprintf("NO2~%s" , .) %>%
formula()
formula_SLR_gwr
# a vector of the included variables
included_var <- labels(terms(formula_SLR_gwr))
# =====================================
# GWR
# =====================================
bandwidth = 1000
gwr_SLR <- gwr.basic(formula_SLR_gwr ,
data = data_annual %>%
st_as_sf(coords = c("X" , "Y") , crs = st_crs(2056)) %>%
as_Spatial() ,
bw = bandwidth ,
adaptive = TRUE)
# =====================================
# cross validation
# =====================================
# conventional CV
for(k in as.factor(1:k_fold)){
# partition
training.data <- data_annual %>% filter(CV != k)
testing.data <- data_annual %>% filter(CV == k)
# train model
model_train <- gwr.predict(formula_SLR_gwr ,
data = training.data %>%
st_as_sf(coords = c("X" , "Y") , crs = st_crs(2056)) %>%
as_Spatial() ,
predictdata = testing.data %>%
st_as_sf(coords = c("X" , "Y") , crs = st_crs(2056)) %>%
as_Spatial()  ,
bw = bandwidth ,
adaptive = TRUE)
# prediction
prediction_test <- testing.data %>%
select(Station_name , NO2 , Type_of_station , CV) %>%
# prediction
mutate(predicted = model_train$SDF$prediction)
# prediction data.frame
if(as.character(k) == "1"){
gwr_SLR_prediction_CV <- prediction_test # <-
}else{ # append
gwr_SLR_prediction_CV <- bind_rows(gwr_SLR_prediction_CV , prediction_test) # <-
}
# clean environment
rm(training.data , testing.data , model_train , prediction_test , k)
}
# spatial CV
for(k in as.factor(1:k_fold)){
# partition
training.data <- data_annual %>% filter(spatial_CV != k)
testing.data <- data_annual %>% filter(spatial_CV == k)
# train model
model_train <- gwr.predict(formula_SLR_gwr ,
data = training.data %>%
st_as_sf(coords = c("X" , "Y") , crs = st_crs(2056)) %>%
as_Spatial() ,
predictdata = testing.data %>%
st_as_sf(coords = c("X" , "Y") , crs = st_crs(2056)) %>%
as_Spatial()  ,
bw = bandwidth ,
adaptive = TRUE)
# prediction
prediction_test <- testing.data %>%
select(Station_name , NO2 , Type_of_station , spatial_CV) %>%
# prediction
mutate(predicted = model_train$SDF$prediction)
# prediction data.frame
if(as.character(k) == "1"){
gwr_SLR_prediction_CV_sp <- prediction_test # <-
}else{ # append
gwr_SLR_prediction_CV_sp <- bind_rows(gwr_SLR_prediction_CV_sp , prediction_test) # <-
}
# clean environment
rm(training.data , testing.data , model_train , prediction_test , k)
}
# combine the prediction of the two CV
gwr_SLR_prediction_CV <- gwr_SLR_prediction_CV %>%
left_join(gwr_SLR_prediction_CV_sp ,
by = c("Station_name" , "NO2" , "Type_of_station") ,
suffix = c("_CV" , "_spatialCV"))
# //////////////////////////////////////////////////////////////////////////
# model evaluation
# //////////////////////////////////////////////////////////////////////////
# =====================================
# model summary
# =====================================
gwr_SLR
# =====================================
# coefficient in space
# =====================================
gwr_SLR_coef_sf <- gwr_SLR$SDF %>%
st_as_sf %>%
as.data.frame() %>%
# coefficients
select(geometry , all_of(included_var)) %>%
pivot_longer(cols = -geometry , names_to = "variable" , values_to = "coef") %>%
# coefficient standard error
left_join(
gwr_SLR$SDF %>%
st_as_sf %>%
as.data.frame() %>%
# standard error
select(geometry , all_of(paste0(included_var , "_SE"))) %>%
pivot_longer(cols = -geometry , names_to = "variable" , values_to = "SE") %>%
mutate(variable = str_replace(variable , "_SE$" , "")),
by = c("variable" , "geometry")
) %>%
st_as_sf()
# =====================================
# observed, predicted, residuals
# =====================================
gwr_SLR_prediction <- data_annual %>%
select(Station_name , NO2 , Type_of_station , X , Y) %>%
# prediction
mutate(predicted = gwr_SLR$SDF$yhat) %>%
# CV-prediction
full_join(gwr_SLR_prediction_CV ,
by = c("Station_name" , "NO2" , "Type_of_station")) %>%
# residuals
mutate(residual = NO2 - predicted ,
residual_CV = NO2 - predicted_CV ,
residual_spatialCV = NO2 - predicted_spatialCV)
# =====================================
# performance indices
# =====================================
# model performance indices as a data.frame
gwr_SLR_indices <- gwr_SLR_prediction %>%   # <-
eval_performance_indices()
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_annual/%s" , model_abbr)
if(!dir.exists(out_dirpath_plots)) dir.create(out_dirpath_plots)
# predicted <-> observed
plot_obs_pred(gwr_SLR_prediction ,
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/obs-pred_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 5 , base_height = 3.5
)
# residual diagnostic plots
plot_resid(gwr_SLR_prediction ,
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
# coefficients in space
gwr_SLR_coef_sf %>%
group_by(variable) %>%
group_map(
~ggplot(.x) +
geom_sf(data = CH) +
geom_sf(aes(color = coef)) +
scale_color_viridis_c() +
labs(title = .x$variable , color = expression(beta*"(u"[i]*",v"[i]*")")) +
theme_bw() ,
.keep = TRUE
) %>%
cowplot::plot_grid(plotlist = . , align = 'hv', ncol = 3) %>%
plot_grid(
ggdraw() +
draw_label(sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) , x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 15)) ,
. ,
ncol = 1,
rel_heights = c(0.05, 1)
)
save_plot(
sprintf("%s/coef-space_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 15 , base_height = 7
)
# =====================================
# spatial autocorrelation of residuals
# =====================================
moran_df <- eval_resid_moran(gwr_SLR_prediction)
# visualization
plot_resid_map(gwr_SLR_prediction ,
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residual-map_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 4
)
# =====================================
# export datasets
# =====================================
{
# export the model coefficients in space
out_dirpath_coef_sf <- "3_results/output-data/model_annual/GWR_coef"
if(!dir.exists(out_dirpath_coef_sf)) dir.create(out_dirpath_coef_sf)
gwr_SLR_coef_sf %>%
st_write(sprintf("%s/%s.shp" , out_dirpath_coef_sf , SAT_product))
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_annual/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
gwr_SLR_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_annual/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
gwr_SLR_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_annual/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
# =====================================
# export datasets
# =====================================
{
# export the model coefficients in space
out_dirpath_coef_sf <- "3_results/output-data/model_annual/GWR_coef"
if(!dir.exists(out_dirpath_coef_sf)) dir.create(out_dirpath_coef_sf)
gwr_SLR_coef_sf %>%
st_write(sprintf("%s/%s.shp" , out_dirpath_coef_sf , SAT_product) , overwrite = TRUE)
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_annual/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
gwr_SLR_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_annual/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
gwr_SLR_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_annual/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
?st_write
# =====================================
# export datasets
# =====================================
{
# export the model coefficients in space
out_dirpath_coef_sf <- "3_results/output-data/model_annual/GWR_coef"
if(!dir.exists(out_dirpath_coef_sf)) dir.create(out_dirpath_coef_sf)
gwr_SLR_coef_sf %>%
st_write(sprintf("%s/%s.shp" , out_dirpath_coef_sf , SAT_product))
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_annual/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
gwr_SLR_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_annual/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
gwr_SLR_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_annual/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
# =====================================
# export model
# =====================================
{
out_dirpath_model <- "3_results/output-model/model_annual"
if(!dir.exists(out_dirpath_model)) dir.create(out_dirpath_model)
saveRDS(gwr_SLR ,
file = sprintf("%s/%s_%s.rds" , out_dirpath_model , model_abbr , SAT_product))
}
tempres <- "annual"
# =====================================
# load data
# =====================================
# model performance indices
model_indices <- list.files(sprintf("3_results/output-data/model_%s/indices" , tempres) ,
pattern = ".csv$" , full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows() %>%
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI")))
# model observed versus predicted values
model_prediction <- list.files(sprintf("3_results/output-data/model_%s/observed-predicted" , tempres) ,
pattern = ".csv$" , full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows() %>%
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI")))
# model residual Moran's I
model_moran <- list.files(sprintf("3_results/output-data/model_%s/moran" , tempres) ,
pattern = "[[:alpha:]]+_[[:alpha:]]+.csv$" , full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows() %>%
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI")))
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim()) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
arrange(model , product) %>%
# re-order columns
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept ,
spatialCV_R2 , spatialCV_RMSE , spatialCV_slope , spatialCV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
# export the tidy table
model_compare_tidy %>%
write_csv(sprintf("3_results/output-data/model_%s/model_%s_indices.csv" , tempres , tempres))
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI")) %>%
write_csv(sprintf("3_results/output-data/model_%s/model_%s_indices_1.csv" , tempres , tempres))
# tidy table with slope and intercept
model_compare_tidy %>%
select(model , product ,
training_slope , training_intercept ,
CV_slope , CV_intercept ,
spatialCV_slope , spatialCV_intercept) %>%
write_csv(sprintf("3_results/output-data/model_%s/model_%s_indices_2.csv" , tempres , tempres))
# =====================================
# spatial CV residual diagnostics
# =====================================
model_prediction %>%
filter(!if_any(everything() , is.na)) %>%
# re-order for visualization
mutate(spatial_CV = factor(spatial_CV)) %>%
# fold-specific RMSE
group_by(model, product , spatial_CV) %>%
summarize(RMSE_spatialCV = Metrics::rmse(NO2 , predicted_spatialCV)) %>%
ungroup() %>%
# visualization
ggplot(aes(x = spatial_CV , y = RMSE_spatialCV , fill = spatial_CV)) +
geom_bar(stat = "identity") +
geom_text(aes(label = format(RMSE_spatialCV , digits = 3)) ,
angle = 90 , hjust = 1.3 , color = "white" , size = 3) +
facet_grid(product ~ model) +
scale_fill_jco() +
labs(title = "RMSE of the spatially-blocked cross validations" ,
x = "Spatially-blocked CV fold" , y = "Spatially-blocked CV-RMSE") +
theme_bw() +
theme(legend.position = "none")
save_plot(
sprintf("3_results/output-graph/model_%s/compare_spatial_CV_RMSE.png" , tempres) ,
plot = last_plot() ,
base_width = 8 , base_height = 6
)
# =====================================
# correlations between different model CV residuals
# =====================================
model_prediction %>%
filter(!if_any(everything() , is.na)) %>%
select(model , product , residual_CV , Station_name) %>%
pivot_wider(id_cols = c(Station_name , product) , names_from = model , values_from = residual_CV) %>%
# correlation matrix plot
filter(product %in% c("OMI" , "TROPOMI")) %>%
group_by(product) %>%
group_map(
~ .x %>%
GGally::ggpairs(columns = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) +
labs(subtitle = .y$product ,
x = "CV residuals" , y = "CV residuals") +
theme_bw() +
theme(axis.text = element_text(size = 7))
) %>%
# multiple plots
lapply(GGally::ggmatrix_gtable) %>%
plot_grid(plotlist = . , align = "h" , axis = "tb" , nrow = 1) %>%
plot_grid(
ggdraw() +
draw_label("Correlation matrix plot of the residuals of the different models" ,
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 15)) ,
. ,
ncol = 1,
rel_heights = c(0.05, 1)
)

as.matrix()
}
# define model
set_random_seed(1010) # reproducibility for Keras
NN_define(hyperparm_vector = hyperparm_vector , n_var = ncol(predictor_train))
# train model
NN %>%
fit(predictor_train , response_train ,
epoch = hyperparm_vector["epochs"] ,
batch_size = hyperparm_vector["batch.size"] ,
validation_split = 0.2 ,
verbose = TRUE)
# prediction
NN_prediction_training <- training.data %>%
select(date , Station_name , NO2 , Type_of_station , X , Y) %>%
# prediction
mutate(predicted = predict(NN , predictor_train)[,1])
NN_prediction_training
for(k in as.factor(1:k_fold)){
# data preparation: partition
training.data <- data_daily %>%
filter(CV != k) %>%
drop_na()
testing.data <- data_daily %>%
filter(CV == k)
# data preparation: make matrix
predictor_train <- training.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_train <- training.data %>%
select(NO2) %>%
as.matrix()
predictor_test <- testing.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_test <- testing.data %>%
select(NO2) %>%
as.matrix()
# define model
set_random_seed(1010) # reproducibility for Keras
NN_define(hyperparm_vector , n_var = ncol(predictor_train))
# train model
NN %>%
fit(predictor_train , response_train ,
epoch = hyperparm_vector["epochs"] ,
batch_size = hyperparm_vector["batch.size"] ,
validation_split = 0.2 ,
verbose = FALSE)
# prediction
prediction_test <- testing.data %>%
select(date , Station_name , NO2 , Type_of_station , CV) %>%
# prediction
mutate(predicted = predict(NN , predictor_test)[,1])
# prediction data.frame
if(as.character(k) == "1"){
NN_prediction_CV <- prediction_test # <-
}else{ # append
NN_prediction_CV <- bind_rows(NN_prediction_CV , prediction_test)
}
# clean environment
rm(k , training.data , testing.data , predictor_train , predictor_test , response_train , response_test , prediction_test)
}
# spatial CV
for(k in as.factor(1:k_fold)){
# data preparation: partition
training.data <- data_daily %>%
filter(spatial_CV != k) %>%
drop_na()
testing.data <- data_daily %>%
filter(spatial_CV == k) %>%
drop_na()
# data preparation: make matrix
predictor_train <- training.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_train <- training.data %>%
select(NO2) %>%
as.matrix()
predictor_test <- testing.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_test <- testing.data %>%
select(NO2) %>%
as.matrix()
# define model
set_random_seed(1010) # reproducibility for Keras
NN_define(hyperparm_vector , n_var = ncol(predictor_train))
# train model
NN %>%
fit(predictor_train , response_train ,
epoch = hyperparm_vector["epochs"] ,
batch_size = hyperparm_vector["batch.size"] ,
validation_split = 0.2 ,
verbose = FALSE)
# prediction
prediction_test <- testing.data %>%
select(date , Station_name , NO2 , Type_of_station , spatial_CV) %>%
# prediction
mutate(predicted = predict(NN , predictor_test)[,1])
# prediction data.frame
if(as.character(k) == "1"){
NN_prediction_CV_sp <- prediction_test # <-
}else{ # append
NN_prediction_CV_sp <- bind_rows(NN_prediction_CV_sp , prediction_test)
}
# clean environment
rm(k , training.data , testing.data , predictor_train , predictor_test , response_train , response_test , prediction_test)
}
# temporal CV
for(k in 1:12){
# data preparation: partition
training.data <- data_daily %>%
mutate(month = month(date)) %>%
filter(month != k) %>%
drop_na()
testing.data <- data_daily %>%
mutate(month = month(date)) %>%
filter(month == k) %>%
drop_na()
# data preparation: make matrix
predictor_train <- training.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_train <- training.data %>%
select(NO2) %>%
as.matrix()
predictor_test <- testing.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_test <- testing.data %>%
select(NO2) %>%
as.matrix()
# define model
set_random_seed(1010) # reproducibility for Keras
NN_define(hyperparm_vector , n_var = ncol(predictor_train))
# train model
NN %>%
fit(predictor_train , response_train ,
epoch = hyperparm_vector["epochs"] ,
batch_size = hyperparm_vector["batch.size"] ,
validation_split = 0.2 ,
verbose = FALSE)
# prediction
prediction_test <- testing.data %>%
select(date , Station_name , NO2 , Type_of_station) %>%
# prediction
mutate(predicted_temporalCV = predict(NN , predictor_test)[,1])
# prediction data.frame
if(as.character(k) == "1"){
NN_prediction_CV_tp <- prediction_test # <-
}else{ # append
NN_prediction_CV_tp <- bind_rows(NN_prediction_CV_tp , prediction_test)
}
# clean environment
rm(k , training.data , testing.data , predictor_train , predictor_test , response_train , response_test , prediction_test)
}
# combine the prediction of the three CV
NN_prediction_CV <- NN_prediction_CV %>%
left_join(NN_prediction_CV_sp ,
by = c("date" , "Station_name" , "NO2" , "Type_of_station") ,
suffix = c("_CV" , "_spatialCV")) %>%
left_join(NN_prediction_CV_tp ,
by = c("date" , "Station_name" , "NO2" , "Type_of_station"))
# //////////////////////////////////////////////////////////////////////////
# model evaluation
# //////////////////////////////////////////////////////////////////////////
# =====================================
# observed, predicted, residuals
# =====================================
NN_prediction <- NN_prediction_training %>%
# CV-prediction
full_join(NN_prediction_CV ,
by = c("Station_name" , "NO2" , "Type_of_station" , "date")) %>%
# residuals
mutate(residual = NO2 - predicted ,
residual_CV = NO2 - predicted_CV ,
residual_spatialCV = NO2 - predicted_spatialCV ,
residual_temporalCV = NO2 - predicted_temporalCV)
# =====================================
# performance indices
# =====================================
# model performance indices as a data.frame
NN_indices <- NN_prediction %>%   # <-
eval_performance_indices()
NN_indices
# predicted <-> observed
plot_obs_pred(NN_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
yper_evaluation %>%
arrange(MAE_CV)
hyper_evaluation %>%
arrange(MAE_CV)
hyper_evaluation %>%
arrange(MAE_CV) %>% View
hyperparm_vector
# =====================================
# hyperparameters
# =====================================
hyperparm_vector <- hyper_evaluation %>%
arrange(MAE_CV) %>%
dplyr::slice(4) %>%
select(-contains("_training") , -contains("_CV")) %>%
unlist
# =====================================
# model with the full training set
# =====================================
{ # data preparation
training.data <- data_daily %>%
drop_na()
# make matrix
predictor_train <- training.data %>%
select(all_of(included_var_garson)) %>%
as.matrix()
response_train <- training.data %>%
select(NO2) %>%
as.matrix()
}
# define model
set_random_seed(1010) # reproducibility for Keras
NN_define(hyperparm_vector = hyperparm_vector , n_var = ncol(predictor_train))
# train model
NN %>%
fit(predictor_train , response_train ,
epoch = hyperparm_vector["epochs"] ,
batch_size = hyperparm_vector["batch.size"] ,
validation_split = 0.2 ,
verbose = TRUE)
NN_indices
# =====================================
# hyperparameters
# =====================================
hyperparm_vector <- hyper_evaluation %>%
arrange(MAE_CV) %>%
dplyr::slice(9) %>%
select(-contains("_training") , -contains("_CV")) %>%
unlist
hyperparm_vector
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_daily/%s" , model_abbr)
if(!dir.exists(out_dirpath_plots)) dir.create(out_dirpath_plots)
# predicted <-> observed
plot_obs_pred(NN_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/obs-pred_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 5 , base_height = 3.5
)
# residual diagnostic plots
plot_resid(NN_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
NN_prediction
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
plot_resid_month
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) ,
daily = TRUE)
NN_prediction
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product)
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) ,
daily = TRUE)
NN_prediction
plot_resid_month
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
NN_prediction %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model"))
NN_prediction %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model"))  %>% #
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of the model residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
NN_prediction %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model"))  %>% #
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of the model residuals by month" ,
subtitle = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product)) +
theme_bw()
NN_prediction %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model"))  %>% #
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
theme_bw()
NN_prediction
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) ,
daily = TRUE)
warnings()
View(NN_prediction)
plot_resid_month
NN_prediction %>%
mutate(month = month(date)) %>%
group_by(month) %>%
summarise(residual = mean(residual , na.rm = TRUE)) %>%
ungroup()
# residuals by  (for monthly or daily models)
plot_resid_month <- function(model_prediction_df , subtitle_text = NULL , daily = FALSE){
if(!daily){
# monthly
model_prediction_df %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model")) %>% #
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of the model residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
}else{
# daily
model_prediction_df %>%
mutate(month = month(date)) %>%
# group_by(month) %>%
# summarise(residual = mean(residual , na.rm = TRUE)) %>%
# ungroup() %>%
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
}
}
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) ,
daily = TRUE)
# residuals by  (for monthly or daily models)
plot_resid_month <- function(model_prediction_df , subtitle_text = NULL , daily = FALSE){
if(!daily){
# monthly
model_prediction_df %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model")) %>% #
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of the model residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
}else{
# daily
model_prediction_df %>%
mutate(month = month(date)) %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model")) %>% #
# group_by(month) %>%
# summarise(residual = mean(residual , na.rm = TRUE)) %>%
# ungroup() %>%
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
}
}
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) ,
daily = TRUE)
# residuals by  (for monthly or daily models)
plot_resid_month <- function(model_prediction_df , subtitle_text = NULL , daily = FALSE){
if(!daily){
# monthly
model_prediction_df %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model")) %>% #
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of the model residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
}else{
# daily
model_prediction_df %>%
mutate(month = month(date)) %>%
pivot_longer(cols = c(residual , residual_temporalCV) , values_to = "residual") %>% #
mutate(name = ifelse(str_detect(name , "temporalCV") , "Temporal CV" , "Full model")) %>% #
# group_by(month) %>%
# summarise(residual = mean(residual , na.rm = TRUE)) %>%
# ungroup() %>%
ggplot(aes(x = factor(month) , y = residual)) +
geom_violin(fill = "grey50" , color = "grey30" , alpha = 0.5 , draw_quantiles = 0.5) +
facet_grid(~name) + #
labs(x = "Month" , y = "Residuals" ,
title = "Distribution of residuals by month" ,
subtitle = subtitle_text) +
theme_bw()
}
}
# residuals by month
plot_resid_month(NN_prediction ,
subtitle_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product) ,
daily = TRUE)
save_plot(
sprintf("%s/residuals-month_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 3
)
# screening of relevant predictor variables
save_plot(
sprintf("%s/%s_screening_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = screen_plot ,
base_width = 5 , base_height = 9
)
# =====================================
# spatial autocorrelation of the residuals
# =====================================
moran_month_df <- eval_resid_moran(NN_prediction , by_time = TRUE , col_time = "date")
any(moran_month_df$p < 0.05)
moran_mean_df <- eval_resid_moran(NN_prediction %>% drop_na() , by_time = FALSE)
# visualization
plot_resid_map(NN_prediction %>% drop_na() , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residual-map_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 4
)
# =====================================
# export datasets
# =====================================
{
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_daily/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
NN_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_daily/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
NN_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_daily/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_month_df %>%
pivot_longer(cols = -month) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/month_%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
moran_mean_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/mean_%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
# =====================================
# export datasets
# =====================================
{
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_daily/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
NN_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_daily/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
NN_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_daily/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_month_df %>%
pivot_longer(cols = -date) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/month_%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
moran_mean_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/mean_%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
source('/Masterarbeit/analysis/2_scripts/daily_NN.R', echo=TRUE)
NN_indices
citation("S5Processor")

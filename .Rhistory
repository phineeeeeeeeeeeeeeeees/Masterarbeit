formula = formula_SLR_final ,  # <-
data = training.data
)
# prediction
prediction_test <- testing.data %>%
select(Station_name , NO2 , Type_of_station , spatial_CV) %>%
# prediction
mutate(predicted = predict(model_train , newdata = testing.data))
# prediction data.frame
if(as.character(k) == "1"){
lm_SLR_prediction_CV_sp <- prediction_test # <-
}else{ # append
lm_SLR_prediction_CV_sp <- bind_rows(lm_SLR_prediction_CV_sp , prediction_test) # <-
}
# clean environment
rm(training.data , testing.data , model_train , prediction_test , k)
}
# combine the prediction of the two CV
lm_SLR_prediction_CV <- lm_SLR_prediction_CV %>%
left_join(lm_SLR_prediction_CV_sp ,
by = c("Station_name" , "NO2" , "Type_of_station") ,
suffix = c("_CV" , "_spatialCV"))
# //////////////////////////////////////////////////////////////////////////
# model evaluation
# //////////////////////////////////////////////////////////////////////////
lm_SLR <- lm(formula(formula_SLR_final) , data = data_annual)
# =====================================
# model summary
# =====================================
summary(lm_SLR)
# =====================================
# observed, predicted, residuals
# =====================================
lm_SLR_prediction <- data_annual %>%
select(Station_name , NO2 , Type_of_station , X , Y) %>%
# prediction
mutate(predicted = predict(lm_SLR , newdata = data_annual)) %>%
# CV-prediction
full_join(lm_SLR_prediction_CV ,
by = c("Station_name" , "NO2" , "Type_of_station")) %>%
# residuals
mutate(residual = NO2 - predicted ,
residual_CV = NO2 - predicted_CV ,
residual_spatialCV = NO2 - predicted_spatialCV)
# =====================================
# performance indices
# =====================================
# model performance indices as a data.frame
lm_SLR_indices <- lm_SLR_prediction %>%
eval_performance_indices()
lm_SLR_indices
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_annual/%s" , model_abbr)
if(!dir.exists(out_dirpath_plots)) dir.create(out_dirpath_plots)
# predicted <-> observed
plot_obs_pred(lm_SLR_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/obs-pred_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 5 , base_height = 3.5
)
# residual diagnostic plots
plot_resid(lm_SLR_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
# =====================================
# spatial autocorrelation of the residuals
# =====================================
moran_df <- eval_resid_moran(lm_SLR_prediction)
# visualization
plot_resid_map(lm_SLR_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residual-map_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 4
)
# =====================================
# export datasets
# =====================================
{
# export the model summary
out_dirpath_lmsummary <- "3_results/output-data/model_annual/SLR_summary"
if(!dir.exists(out_dirpath_lmsummary)) dir.create(out_dirpath_lmsummary , recursive = TRUE)
lm_SLR %>%
broom::tidy() %>%
write_csv(sprintf("%s/%s.csv" , out_dirpath_lmsummary , SAT_product))
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_annual/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted , recursive = TRUE)
lm_SLR_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_annual/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices , recursive = TRUE)
lm_SLR_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_annual/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran , recursive = TRUE)
moran_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
# =====================================
# export model
# =====================================
{
out_dirpath_model <- "3_results/output-model/model_annual"
if(!dir.exists(out_dirpath_model)) dir.create(out_dirpath_model)
saveRDS(lm_SLR , # <-
file = sprintf("%s/%s_%s.rds" , out_dirpath_model , model_abbr , SAT_product))
}
tempres <- "annual"
library(readr)
library(dplyr) ; library(tidyr)
library(ggplot2) ; library(ggsci) ; library(ggthemes) ; library(cowplot)
library(lubridate) ; library(stringr)
# =====================================
# load data
# =====================================
# model performance indices
model_indices <- list.files(sprintf("3_results/output-data/model_%s/indices" , tempres) ,
pattern = ".csv$" , full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows() %>%
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI")))
# model observed versus predicted values
model_prediction <- list.files(sprintf("3_results/output-data/model_%s/observed-predicted" , tempres) ,
pattern = ".csv$" , full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows() %>%
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI")))
# model residual Moran's I
model_moran <- list.files(sprintf("3_results/output-data/model_%s/moran" , tempres) ,
pattern = "[[:alpha:]]+_[[:alpha:]]+.csv$" , full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows() %>%
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI")))
# distance from the monitoring sites to the nearest road
sites_road <- read_csv("1_data/processed/cleaned/extracted/site-road-distance.csv")
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim()) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
arrange(model , product) %>%
# re-order columns
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept ,
spatialCV_R2 , spatialCV_RMSE , spatialCV_slope , spatialCV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
# export the tidy table
model_compare_tidy %>%
write_csv(sprintf("3_results/output-data/model_%s/model_%s_indices.csv" , tempres , tempres))
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI")) %>%
write_csv(sprintf("3_results/output-data/model_%s/model_%s_indices_1.csv" , tempres , tempres))
# tidy table with slope and intercept
model_compare_tidy %>%
select(model , product ,
training_slope , training_intercept ,
CV_slope , CV_intercept ,
spatialCV_slope , spatialCV_intercept) %>%
write_csv(sprintf("3_results/output-data/model_%s/model_%s_indices_2.csv" , tempres , tempres))
# =====================================
# spatial CV residual diagnostics
# =====================================
model_prediction %>%
filter(!if_any(everything() , is.na)) %>%
# re-order for visualization
mutate(spatial_CV = factor(spatial_CV)) %>%
# fold-specific RMSE
group_by(model, product , spatial_CV) %>%
summarize(RMSE_spatialCV = Metrics::rmse(NO2 , predicted_spatialCV)) %>%
ungroup() %>%
# visualization
ggplot(aes(x = spatial_CV , y = RMSE_spatialCV , fill = spatial_CV)) +
geom_bar(stat = "identity") +
geom_text(aes(label = format(RMSE_spatialCV , digits = 3)) ,
angle = 90 , hjust = 1.3 , color = "white" , size = 3) +
facet_grid(product ~ model) +
scale_fill_jco() +
labs(title = "RMSE of the spatially-blocked cross validations" ,
x = "Spatially-blocked CV fold" , y = "Spatially-blocked CV-RMSE") +
theme_bw() +
theme(legend.position = "none")
save_plot(
sprintf("3_results/output-graph/model_%s/compare_spatial_CV_RMSE.png" , tempres) ,
plot = last_plot() ,
base_width = 8 , base_height = 6
)
# =====================================
# correlations between different model CV residuals
# =====================================
model_prediction %>%
filter(!if_any(everything() , is.na)) %>%
select(model , product , residual_CV , Station_name) %>%
pivot_wider(id_cols = c(Station_name , product) , names_from = model , values_from = residual_CV) %>%
# correlation matrix plot
filter(product %in% c("OMI" , "TROPOMI")) %>%
group_by(product) %>%
group_map(
~ .x %>%
GGally::ggpairs(columns = c("SLR" , "GWR" , "RF" , "XGB" , "LGB" , "NN")) +
labs(subtitle = .y$product ,
x = "CV residuals" , y = "CV residuals") +
theme_bw() +
theme(axis.text = element_text(size = 7))
) %>%
# multiple plots
lapply(GGally::ggmatrix_gtable) %>%
plot_grid(plotlist = . , align = "h" , axis = "tb" , nrow = 1) %>%
plot_grid(
ggdraw() +
draw_label("Correlation matrix plot of the residuals of the different models" ,
x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 15)) ,
. ,
ncol = 1,
rel_heights = c(0.05, 1)
)
save_plot(
sprintf("3_results/output-graph/model_%s/compare_residual_correlation.png" , tempres) ,
plot = last_plot() ,
base_width = 10 , base_height = 5
)
model <- readRDS("3_results/output-model/model_daily/SLR_OMI.rds")
# lm
model$coefficients %>%
names %>%
paste(collapse = ", ")
library(dplyr)
library(lme4)
# lm
model$coefficients %>%
names %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/SLR_TROPOMI.rds")
# lm
model$coefficients %>%
names %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/SLMER_TROPOMI.rds")
# lmer
model %>%
fixef() %>%
names() %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/SLMER_OMI.rds")
# lmer
model %>%
fixef() %>%
names() %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/RF_OMI.rds")
# ranger
model$variable.importance %>%
names %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/RF_TROPOMI.rds")
# ranger
model$variable.importance %>%
names %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/XGB_TROPOMI.rds")
model <- readRDS("3_results/output-model/model_daily/XGB_TROPOMI.rds")
library(xgboost)
# xgboost
model$feature_names %>%
paste(collapse = ", ")
model <- readRDS("3_results/output-model/model_daily/XGB_OMI.rds")
# xgboost
model$feature_names %>%
paste(collapse = ", ")
library(readr)
library(sf)
library(dplyr) ; library(tidyr)
library(ggplot2) ; library(ggsci) ; library(ggthemes)
library(lubridate) ; library(stringr)
library(spdep)
library(Metrics)
library(lightgbm)
source("2_scripts/utils_model-eval.R")
# =====================================
# load datasets
# =====================================
# training data
data_daily_raw <- read_csv("1_data/processed/cleaned/extracted/daily_scaled.csv")
# cross validation
{
in_filepath_CV <- list.files("1_data/processed/cleaned/extracted/" , "CV.shp$" , full.names = TRUE)
sites_CV <- st_read(in_filepath_CV) %>%
rename(Station_name = Station)
k_fold <- in_filepath_CV %>%
str_extract("\\d+-fold") %>% str_extract("\\d+") %>%
as.integer()
}
# implement the CV design in the training data
data_daily_raw <- data_daily_raw %>%
inner_join(sites_CV , by = "Station_name") %>%
select(-geometry)
# non-predictor columns
columns_nonpredictor <- c("Station_name" , "NO2" , "Type_of_zone" , "Type_of_station" ,
"Altitude" , "Canton_ID" , "Canton_name" , "X" , "Y" ,
"CV" , "spatial_CV" , "date")
# //////////////////////////////////////////////////////////////////////////
# naming the model
# //////////////////////////////////////////////////////////////////////////
model_name <- "Light gradient boosting machine"
model_abbr <- "LGB"
SAT_product <- c("OMI" , "TROPOMI")[1]
# //////////////////////////////////////////////////////////////////////////
# data preparation for LightGBM
# //////////////////////////////////////////////////////////////////////////
if(SAT_product == "OMI"){
data_daily <- data_daily_raw %>%
# OMI
select(-TROPOMI_NO2, -ends_with("12H")) %>%
# drop NA
drop_na() %>%
# date as DOY (numeric)
mutate(DOY = yday(date))
}else if(SAT_product == "TROPOMI") {
data_daily <- data_daily_raw %>%
# TROPOMI
select(-OMI_NO2, -ends_with("15H")) %>%
# drop NA
drop_na() %>%
# date as DOY (numeric)
mutate(DOY = yday(date))
}
# =====================================
# predictor
# screening of important predictor variables
# =====================================
set.seed(123)
lgb_screen <- lightgbm(
data = data_daily %>%
select(-all_of(columns_nonpredictor)) %>%
# random-value variables
mutate(R1 = runif(n()) ,
R2 = runif(n()) ,
R3 = runif(n()) ) %>%
# matrix
as.matrix() %>%
# lgb.Dataset object
lgb.Dataset(data = . , label = response_full) ,
# default
params = list(learning_rate = 0.1 , num_leaves = 31) ,
objective = "regression" ,
boosting_type = "gbdt" ,
nrounds = 500
)
# =====================================
# response
# =====================================
response_full <- data_daily %>%
select(NO2) %>%
as.matrix()
# =====================================
# predictor
# screening of important predictor variables
# =====================================
set.seed(123)
lgb_screen <- lightgbm(
data = data_daily %>%
select(-all_of(columns_nonpredictor)) %>%
# random-value variables
mutate(R1 = runif(n()) ,
R2 = runif(n()) ,
R3 = runif(n()) ) %>%
# matrix
as.matrix() %>%
# lgb.Dataset object
lgb.Dataset(data = . , label = response_full) ,
# default
params = list(learning_rate = 0.1 , num_leaves = 31) ,
objective = "regression" ,
boosting_type = "gbdt" ,
nrounds = 500
)
# importance
lgb_screen_importance <- lgb_screen %>%
lgb.importance(model = .) %>%
as_tibble()
# visualization
lgb_screen_importance %>%
mutate(class = ifelse(str_detect(Feature , "R[123]") , "Random" , "Predictor variables")) %>%
# reorder for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# visualization
ggplot(aes(x = Feature , y = Gain , fill = class)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_lancet() +
labs(x = "Variables" , y = "Variable importance (Gain)" , fill = "" ,
title = "Screening of relevant predictor variables" ,
subtitle = sprintf("The variable importance of LightGBM (%s)" , SAT_product)) +
theme_bw() +
theme(axis.text.y = element_text(size = 4) , legend.position = "bottom")
# exclude not-important variables
included_var <- lgb_screen_importance %>%
filter(Gain > lgb_screen_importance %>%
filter(str_detect(Feature , "R[123]")) %>%
# the max importance of the random-value variables
summarize(Gain = max(Gain)) %>%
unlist) %>%
select(Feature) %>%
unlist %>% unname()
paste(included_var , collapse = ", ")
SAT_product <- c("OMI" , "TROPOMI")[2]
# //////////////////////////////////////////////////////////////////////////
# data preparation for LightGBM
# //////////////////////////////////////////////////////////////////////////
if(SAT_product == "OMI"){
data_daily <- data_daily_raw %>%
# OMI
select(-TROPOMI_NO2, -ends_with("12H")) %>%
# drop NA
drop_na() %>%
# date as DOY (numeric)
mutate(DOY = yday(date))
}else if(SAT_product == "TROPOMI") {
data_daily <- data_daily_raw %>%
# TROPOMI
select(-OMI_NO2, -ends_with("15H")) %>%
# drop NA
drop_na() %>%
# date as DOY (numeric)
mutate(DOY = yday(date))
}
# =====================================
# response
# =====================================
response_full <- data_daily %>%
select(NO2) %>%
as.matrix()
# =====================================
# predictor
# screening of important predictor variables
# =====================================
set.seed(123)
lgb_screen <- lightgbm(
data = data_daily %>%
select(-all_of(columns_nonpredictor)) %>%
# random-value variables
mutate(R1 = runif(n()) ,
R2 = runif(n()) ,
R3 = runif(n()) ) %>%
# matrix
as.matrix() %>%
# lgb.Dataset object
lgb.Dataset(data = . , label = response_full) ,
# default
params = list(learning_rate = 0.1 , num_leaves = 31) ,
objective = "regression" ,
boosting_type = "gbdt" ,
nrounds = 500
)
# importance
lgb_screen_importance <- lgb_screen %>%
lgb.importance(model = .) %>%
as_tibble()
# exclude not-important variables
included_var <- lgb_screen_importance %>%
filter(Gain > lgb_screen_importance %>%
filter(str_detect(Feature , "R[123]")) %>%
# the max importance of the random-value variables
summarize(Gain = max(Gain)) %>%
unlist) %>%
select(Feature) %>%
unlist %>% unname()
paste(included_var , collapse = ", ")

) ,
) %>%
# the results
select(x,y,month,starts_with("pred_")) %>%
as.data.table()
projection_LGB_TROPOMI <- full_df %>%
# subset the columns of the predictor variables
select(x,y,one_of(model_LGB_TROPOMI %>% lgb.importance() %>% as_tibble() %>% select(Feature) %>% unlist %>% unname())) %>%
# remove rows with missing values
drop_na() %>%
# prediction
mutate(
pred_LGB_TROPOMI = predict(
model_LGB_TROPOMI ,
data = full_df %>%
as_tibble() %>%
select(all_of(model_LGB_TROPOMI %>% lgb.importance() %>% as_tibble() %>% select(Feature) %>% unlist %>% unname())) %>%
drop_na() %>%
as.matrix()
) ,
) %>%
# the results
select(x,y,month,starts_with("pred_")) %>%
as.data.table()
# Neural network ------------------------------------------------------------
projection_NN_OMI <- full_df %>%
# subset the columns of the predictor variables
select(x,y,one_of(model_NN_OMI_variables)) %>%
# remove rows with missing values
drop_na() %>%
# prediction
mutate(
pred_NN_OMI = predict(
model_NN_OMI ,
full_df %>%
as_tibble() %>%
select(all_of(model_NN_OMI_variables)) %>%
drop_na() %>%
as.matrix()
)[,1] ,
) %>%
# the results
select(x,y,month,starts_with("pred_")) %>%
as.data.table()
projection_NN_TROPOMI <- full_df %>%
# subset the columns of the predictor variables
select(x,y,one_of(model_NN_TROPOMI_variables)) %>%
# remove rows with missing values
drop_na() %>%
# prediction
mutate(
pred_NN_TROPOMI = predict(
model_NN_TROPOMI ,
full_df %>%
as_tibble() %>%
select(all_of(model_NN_TROPOMI_variables)) %>%
drop_na() %>%
as.matrix()
)[,1] ,
) %>%
# the results
select(x,y,month,starts_with("pred_")) %>%
as.data.table()
# =====================================
# joining
# =====================================
projection <- projection_SLR %>%
full_join(projection_RF , by = c("x" , "y" , "month")) %>%
full_join(projection_XGB_OMI , by = c("x" , "y" , "month")) %>%
full_join(projection_XGB_TROPOMI, by = c("x" , "y" , "month")) %>%
full_join(projection_LGB_OMI , by = c("x" , "y" , "month")) %>%
full_join(projection_LGB_TROPOMI, by = c("x" , "y" , "month")) %>%
full_join(projection_NN_OMI , by = c("x" , "y" , "month")) %>%
full_join(projection_NN_TROPOMI, by = c("x" , "y" , "month")) %>%
as.data.table()
projection %>%
fwrite("3_results/output-data/model_monthly/projection_monthly_Zurich.csv")
projection
# =====================================
# convert the prediction maps to stars
# =====================================
projection_stars <- projection %>%
setNames(str_remove(colnames(.) , "pred_")) %>%
st_as_stars(dim = c("x" , "y" , "month")) %>%
st_set_crs(st_crs(2056)) %>%
merge()
projection_stars
# =====================================
# convert the prediction maps to stars
# =====================================
projection_stars <- projection %>%
setNames(str_remove(colnames(.) , "pred_")) %>%
st_as_stars(dim = c("x" , "y" , "month")) %>%
st_set_crs(st_crs(2056))
projection_stars
?st_as_stars
# =====================================
# convert the prediction maps to stars
# =====================================
projection_stars <- projection %>%
setNames(str_remove(colnames(.) , "pred_")) %>%
st_as_stars(dim = c("x" , "y" , "month") , coords = 1:3) %>%
st_set_crs(st_crs(2056))
projection_stars
# =====================================
# convert the prediction maps to stars
# =====================================
projection_stars <- projection %>%
setNames(str_remove(colnames(.) , "pred_")) %>%
st_as_stars(dim = c("x" , "y" , "month") , coords = 1:3) %>%
st_set_crs(st_crs(2056)) %>%
merge()
projection_stars
# export the projected NO2
projection_stars %>%
write_stars("3_results/output-data/model_monthly/projection_monthly_Zurich.tif")
projection_stars
# export the projected NO2
out_dirpath_map <- "3_results/output-data/model_monthly/projection_monthly_Zurich"
dir.exists(out_dirpath_map)
if(!dir.exists(out_dirpath_map)) dir.create(out_dirpath_map , recursive = TRUE)
projection_stars
projection %>%
setNames(str_remove(colnames(.) , "pred_")) %>%
st_as_stars(dim = c("x" , "y" , "month") , coords = 1:3) %>%
st_set_crs(st_crs(2056))
# =====================================
# convert the prediction maps to stars
# =====================================
projection_stars <- projection %>%
setNames(str_remove(colnames(.) , "pred_")) %>%
st_as_stars(dim = c("x" , "y" , "month") , coords = 1:3) %>%
select(-month) %>%
st_set_crs(st_crs(2056)) %>%
merge()
projection_stars
projection
projection_stars
# export the projected NO2
projection_stars[,,,1]
# export the projected NO2
projection_stars[,,,,1]
# export the projected NO2
projection_stars %>% st_get_dimension_values(4)
# export the projected NO2
st_get_dimension_values(projection_stars , 4)
i = st_get_dimension_values(projection_stars , 4)[1]
i
projection_stars[,,,,i]
# export the projected NO2
models <- st_get_dimension_values(projection_stars , 4)
models
models
i = 1
projection_stars[,,,,i]
projection_stars[,,,,i] %>%
split(4)
projection_stars[,,,,i] %>%
split(4) %>%
write_stars(sprintf("%s/%s.tif" , out_dirpath_map , models[i]))
for(i in 1:length(models)){
projection_stars[,,,,i] %>%
split(4) %>%
write_stars(sprintf("%s/%s.tif" , out_dirpath_map , models[i]))
}
rm(i)
# visualization
ggplot() +
geom_stars(data = projection_stars) +
#geom_sf(data = CH , fill = NA , color = "white") +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
facet_grid(attributes~month) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(8,"RdYlGn")[8:1] ) +
labs(x = "" , y = "" ,
title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")")) +
theme_bw() +
theme(axis.text = element_text(size = 4))
projection_stars
library(sf) ; library(stars)
library(dplyr) ; library(tidyr)
library(ggplot2) ; library(ggsci) ; library(ggthemes) ; library(cowplot)
library(lubridate) ; library(stringr)
# =====================================
# load model projection maps as stars
# =====================================
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif")
projection_annual
list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)
# monthly
projection_monthly <- read_stars(
list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)
)
projection_monthly
names(projection_monthly)
# monthly
projection_monthly <- read_stars(
list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)
) %>%
setNames(names(.) %>% str_remove(".tif")) %>%
merge()
projection_monthly
projection_monthly %>%
st_set_dimensions(3 , names = "month")
projection_monthly %>%
st_set_dimensions(3 , names = "month") %>%
st_set_dimensions(4 , names = "model")
st_get_dimension_values(projection_monthly , 3)
st_get_dimension_values(projection_monthly , 3) %>% class()
# monthly
projection_monthly <- read_stars(
list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)
) %>%
setNames(names(.) %>% str_remove(".tif")) %>%
merge() %>%
st_set_dimensions(3 , names = "month") %>%
st_set_dimensions(4 , names = "model")
# =====================================
# load model projection maps as stars
# =====================================
# annual
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
st_set_dimensions(3 , names = "model")
projection_annual
# =====================================
# load model projection maps as stars
# =====================================
# annual
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
st_set_dimensions(3 , names = "model") %>%
filter(!str_detect(model , "spatial"))
projection_annual
RColorBrewer::brewer.pal(8,"RdYlGn")[8:1]
# =====================================
# color ramp
# =====================================
colorramp <- c("#2b83ba" , "#6bb0af" , "#abdda4" , "#d5eeb2" , "#ffffbf" , "#fed790" , "#fdae61" , "#ea633e" , "#d7191c")
projection_monthly
st_get_dimension_values(projection_monthly , 4)
# monthly
projection_monthly <- read_stars(list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)) %>%
setNames(names(.) %>% str_remove(".tif")) %>%
merge() %>%
st_set_dimensions(3 , names = "month") %>%
st_set_dimensions(4 , names = "model" ,
values = factor(st_get_dimension_values(. , 4) , levels = c("SLR_OMI" , "SLR_TROPOMI" , "SLMER_OMI" , "SLMER_TROPOMI" , "RF_OMI" , "RF_TROPOMI" , "XGB_OMI" , "XGB_TROPOMI" , "LGB_OMI" , "LGB_TROPOMI" , "NN_OMI" , "NN_TROPOMI")))
projection_monthly
library(sf) ; library(stars)
library(readr) ; library(vroom) ; library(data.table)
library(dtplyr) ; library(multidplyr)
library(dplyr , warn.conflicts = FALSE) ; library(tidyr)
library(ggplot2) ; library(ggsci) ; library(ggthemes) ; library(cowplot)
library(lubridate) ; library(stringr)
library(lme4)
# =====================================
# load models
# =====================================
in_dirpath_models <- "3_results/output-model/model_monthly"
# models saved as .rds files
in_filepath_RDS <- list.files(in_dirpath_models , full.names = TRUE , pattern = ".rds$")
for(RDSfile in in_filepath_RDS){
model_temp <- readRDS(RDSfile)
assign(
basename(RDSfile) %>% str_remove(".rds") %>% str_c("model_" , . ) ,
model_temp
)
rm(model_temp , RDSfile)
}
source('/Masterarbeit/analysis/2_scripts/monthly_projection.R', echo=TRUE)
source('/Masterarbeit/analysis/2_scripts/monthly_projection.R', echo=TRUE)
# =====================================
# load models
# =====================================
in_dirpath_models <- "3_results/output-model/model_monthly"
library(sf) ; library(stars)
library(dplyr) ; library(tidyr)
library(ggplot2) ; library(ggsci) ; library(ggthemes) ; library(cowplot)
library(lubridate) ; library(stringr)
# =====================================
# load model projection maps as stars
# =====================================
# annual
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
filter(!str_detect(attributes , "spatial"))
# =====================================
# load model projection maps as stars
# =====================================
# annual
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
filter(!str_detect(attributes , "spatial")) %>%
st_set_dimensions(3 , names = "model" ,
values = factor(st_get_dimension_values(. , 4) , levels = c("SLR_OMI" , "SLR_TROPOMI" , "RF_OMI" , "RF_TROPOMI" , "XGB_OMI" , "XGB_TROPOMI" , "LGB_OMI" , "LGB_TROPOMI" , "NN_OMI" , "NN_TROPOMI")))
read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif")
# =====================================
# load model projection maps as stars
# =====================================
# annual
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
filter(!str_detect(band , "spatial")) %>%
st_set_dimensions(3 , names = "model" ,
values = factor(st_get_dimension_values(. , 4) , levels = c("SLR_OMI" , "SLR_TROPOMI" , "RF_OMI" , "RF_TROPOMI" , "XGB_OMI" , "XGB_TROPOMI" , "LGB_OMI" , "LGB_TROPOMI" , "NN_OMI" , "NN_TROPOMI")))
read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
filter(!str_detect(band , "spatial"))
# =====================================
# load model projection maps as stars
# =====================================
# annual
projection_annual <- read_stars("3_results/output-data/model_annual/projection_annual_Zurich.tif") %>%
filter(!str_detect(band , "spatial")) %>%
st_set_dimensions(3 , names = "model" ,
values = factor(st_get_dimension_values(. , 3) , levels = c("SLR_OMI" , "SLR_TROPOMI" , "RF_OMI" , "RF_TROPOMI" , "XGB_OMI" , "XGB_TROPOMI" , "LGB_OMI" , "LGB_TROPOMI" , "NN_OMI" , "NN_TROPOMI")))
projection_annual
list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)
# monthly
projection_monthly <- read_stars(list.files("3_results/output-data/model_monthly/projection_monthly_Zurich" , pattern = ".tif$" , full.names = TRUE)) %>%
setNames(names(.) %>% str_remove(".tif")) %>%
merge() %>%
st_set_dimensions(3 , names = "month") %>%
st_set_dimensions(4 , names = "model" ,
values = factor(st_get_dimension_values(. , 4) , levels = c("SLR_OMI" , "SLR_TROPOMI" , "SLMER_OMI" , "SLMER_TROPOMI" , "RF_OMI" , "RF_TROPOMI" , "XGB_OMI" , "XGB_TROPOMI" , "LGB_OMI" , "LGB_TROPOMI" , "NN_OMI" , "NN_TROPOMI")))
projection_monthly
# =====================================
# color ramp
# =====================================
colorramp <- c("#2b83ba" , "#6bb0af" , "#abdda4" , "#d5eeb2" , "#ffffbf" , "#fed790" , "#fdae61" , "#ea633e" , "#d7191c")
projection_annual
# =====================================
# map: annual
# =====================================
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
scale_fill_gradientn(values = colorramp)
colorramp
# =====================================
# map: annual
# =====================================
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
scale_fill_gradientn(colors = colorramp)
# =====================================
# map: annual
# =====================================
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")")) +
theme_bw() +
theme(axis.text = element_text(size = 10) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
# =====================================
# map: annual
# =====================================
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 10) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
# =====================================
# map: annual
# =====================================
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
coord_sf(crs = st_crs(2056) , expand = FALSE , xlim = c(2674951 , 2685258) , ylim = c(1244393 , 1252307)) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 10) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
projection_monthly
# =====================================
# map: monthly
# =====================================
ggplot() +
geom_stars(data = projection_monthly) +
facet_grid(model ~ month) +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 10) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
# =====================================
# map: monthly
# =====================================
ggplot() +
geom_stars(data = projection_monthly) +
facet_grid(model ~ month) +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 6) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
save_plot(
"3_results/output-graph/model_monthly/mapping.png" ,
base_height = 13 , base_width = 13
)
save_plot(
"3_results/output-graph/model_monthly/mapping.png" ,
plot = last_plot() ,
base_height = 13 , base_width = 13
)
save_plot(
"3_results/output-graph/model_monthly/mapping.png" ,
plot = last_plot() ,
base_height = 13 , base_width = 15
)
# =====================================
# map: monthly
# =====================================
ggplot() +
geom_stars(data = projection_monthly) +
facet_grid(model ~ month) +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 6) ,
axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1) ,
strip.text.y = element_text(size = 9))
save_plot(
"3_results/output-graph/model_monthly/mapping.png" ,
plot = last_plot() ,
base_height = 13 , base_width = 15
)
# =====================================
# map: monthly
# =====================================
ggplot() +
geom_stars(data = projection_monthly) +
facet_grid(model ~ month) +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 6) ,
axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1) ,
strip.text.y = element_text(size = 6))
save_plot(
"3_results/output-graph/model_monthly/mapping.png" ,
plot = last_plot() ,
base_height = 13 , base_width = 15
)
# zoomed
ggplot() +
geom_stars(data = projection_monthly) +
facet_grid(model ~ month) +
coord_sf(crs = st_crs(2056) , expand = FALSE , xlim = c(2674951 , 2685258) , ylim = c(1244393 , 1252307)) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 6) ,
axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1) ,
strip.text.y = element_text(size = 6))
save_plot(
"3_results/output-graph/model_monthly/mapping_zoomed.png" ,
plot = last_plot() ,
base_height = 13 , base_width = 15
)
# =====================================
# map: annual
# =====================================
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
coord_sf(crs = st_crs(2056) , expand = FALSE) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 10) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
save_plot(
"3_results/output-graph/model_annual/mapping.png" ,
plot = last_plot() ,
base_height = 8 , base_width = 13
)
# zoomed
ggplot() +
geom_stars(data = projection_annual) +
facet_wrap( ~ model , nrow = 2 , dir = "v") +
coord_sf(crs = st_crs(2056) , expand = FALSE , xlim = c(2674951 , 2685258) , ylim = c(1244393 , 1252307)) +
scale_fill_gradientn(colors = colorramp) +
labs(title = expression("Model-predicted ground-level NO"[2] * " concentration") ,
fill = expression("NO"[2] * " (Âµg/m"^3 * ")") ,
x = "Longitude" , y = "Latitude") +
theme_bw() +
theme(axis.text = element_text(size = 10) , axis.text.x = element_text(angle = 90 , vjust = 0.5 , hjust = 1))
save_plot(
"3_results/output-graph/model_annual/mapping_zoomed.png" ,
plot = last_plot() ,
base_height = 8 , base_width = 13
)

plot_resid <- function(model_prediction_df , title_text){
plot_input_df <- model_prediction_df %>%
pivot_longer(cols = c(starts_with("residual") , starts_with("predicted"))) %>%
separate(name , into = c("name" , "type") , sep = "_") %>%
mutate(type = ifelse(is.na(type) , "Full model" , type)) %>%
pivot_wider(names_from = name , values_from = value) %>%
# rename for visualization
mutate(type = type %>%
str_replace("^CV$" , "CV") %>%
str_replace("spatialCV" , "Spatial CV") %>%
str_replace("temporalCV" , "Temporal CV")) %>%
# re-order for visualization
mutate(type = factor(type , levels = c("Full model" , "CV" , "Spatial CV" , "Temporal CV")))
plot_grid(
plot_input_df %>%
# visualization
ggplot(aes(x = predicted , y = residual)) +
geom_hline(yintercept = 0 , linetype = 2 , color = "grey50") +
geom_point(aes(color = Type_of_station) , shape = 1 , alpha = 0.8) +
geom_smooth() +
facet_grid(type~.) +
# scale_color_discrete(labels = c("Background" , "Industry" , "Traffic") ,
#                      guide = guide_legend(direction = "vertical", title.position = "top",
#                                           label.position="top", label.hjust = 0.5, label.vjust = 0.5,
#                                           label.theme = element_text(angle = 90 , size = 8))) +
scale_color_discrete(labels = c("BG" , "IND" , "TRAF")) +
labs(x = expression("Model-estimated NO"[2]) , y = "Residuals" ,
color = "" ,
subtitle = "Residuals vs fitted") +
coord_fixed(ylim = c(min(plot_input_df$residual) , max(plot_input_df$residual))) +
theme_bw() +
theme(legend.position = "bottom" ,
legend.margin = margin(-1,0,0,0,"pt")) ,
# Histogram of the residuals
plot_input_df %>%
# visualization
ggplot(aes(x = residual)) +
geom_density(color = "azure4" , fill = "azure" , alpha = 0.6) +
geom_histogram(aes(y = ..density..) , fill = "azure3") +
geom_density(color = "azure4") +
geom_vline(aes(xintercept = mean(residual)) , color = "dodgerblue3") +
geom_vline(xintercept = 0 , linetype = 2 , color = "white" , alpha = 0.9) +
coord_flip(xlim = c(min(plot_input_df$residual) , max(plot_input_df$residual))) +
facet_grid(type~.) +
labs(x = "Residuals" , y = "Density" ,
subtitle = "Residual histogram") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90 , vjust = 1 , hjust = 1)),
# residual QQ-plot
plot_input_df %>%
group_by(type) %>%
mutate(residual = scale(residual)) %>%
ungroup %>%
# visualization
ggplot(aes(sample = residual)) +
stat_qq(shape = 1) +
stat_qq_line(color = "dodgerblue3") +
facet_grid(type~. ) +
labs(x = "Theoretical quantiles" , y = "Standardized residuals" ,
subtitle = "Residual QQ-plot") +
coord_fixed() +
theme_bw() ,
ncol = 3 , axis = "tb" , align = "h" , rel_widths = c(1,0.6,0.7)
) %>%
plot_grid(
ggdraw() +
draw_label(title_text , x = 0, hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 15)) ,
. ,
ncol = 1,
rel_heights = c(0.05, 1)
)
}
# variable importance
xgb_final_importance %>%
arrange(-Gain) %>%
# re-order for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# dplyr::slice(1:30) %>%
ggplot(aes(x = Feature , y = Gain)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Variables" , y = "Gain" ,
title = sprintf("GBM variable importance (with %s)" , SAT_product) ,
subtitle = "Gain: the relative contribution of the corresponding \nfeature to the model") +
theme_bw()
# variable importance
xgb_final_importance %>%
arrange(-Gain) %>%
# re-order for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# dplyr::slice(1:30) %>%
ggplot(aes(x = Feature , y = Gain)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Variables" , y = "Gain" ,
title = sprintf("GBM variable importance (with %s)" , SAT_product) ,
subtitle = "Gain: the relative contribution of the corresponding \nfeature to the model") +
theme_bw() +
theme(axis.text.y = element_text(size = 8))
# variable importance
xgb_final_importance %>%
arrange(-Gain) %>%
# re-order for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# dplyr::slice(1:30) %>%
ggplot(aes(x = Feature , y = Gain)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Variables" , y = "Gain" ,
title = sprintf("GBM variable importance (with %s)" , SAT_product) ,
subtitle = "Gain: the relative contribution of the corresponding \nfeature to the model") +
theme_bw() +
theme(axis.text.y = element_text(size = 6))
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_annual/%s" , model_abbr)
if(!dir.exists(out_dirpath_plots)) dir.create(out_dirpath_plots)
# predicted <-> observed
plot_obs_pred(xgb_final_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/obs-pred_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 5 , base_height = 3.5
)
# residual diagnostic plots
plot_resid(xgb_final_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
# variable importance
xgb_final_importance %>%
arrange(-Gain) %>%
# re-order for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# dplyr::slice(1:30) %>%
ggplot(aes(x = Feature , y = Gain)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Variables" , y = "Gain" ,
title = sprintf("GBM variable importance (with %s)" , SAT_product) ,
subtitle = "Gain: the relative contribution of the corresponding \nfeature to the model") +
theme_bw() +
theme(axis.text.y = element_text(size = 6))
save_plot(
sprintf("%s/importance_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 6
)
# =====================================
# spatial autocorrelation of the residuals
# =====================================
moran_df <- eval_resid_moran(xgb_final_prediction)
# visualization
plot_resid_map(xgb_final_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residual-map_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 4
)
# =====================================
# export datasets
# =====================================
{
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_annual/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
xgb_final_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_annual/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
xgb_final_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_annual/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
# =====================================
# export model
# =====================================
{
out_dirpath_model <- "3_results/output-model/model_annual"
if(!dir.exists(out_dirpath_model)) dir.create(out_dirpath_model)
saveRDS(xgb_final_full , # <-
file = sprintf("%s/%s_%s.rds" , out_dirpath_model , model_abbr , SAT_product))
}
SAT_product <- c("OMI" , "TROPOMI")[2]
# //////////////////////////////////////////////////////////////////////////
# data preparation for xgboost
# //////////////////////////////////////////////////////////////////////////
if(SAT_product == "OMI"){
data_annual <- data_annual_raw %>%
# OMI
select(-TROPOMI_NO2, -ends_with("12H"))
}else if(SAT_product == "TROPOMI") {
data_annual <- data_annual_raw %>%
# TROPOMI
select(-OMI_NO2, -ends_with("15H"))
}
# =====================================
# response
# =====================================
response_full <- data_annual %>%
select(NO2) %>%
unlist() %>% unname()
# =====================================
# predictor
# screening of important predictor variables
# =====================================
set.seed(123)
xgb_screen <- xgboost(
data = data_annual %>%
select(-all_of(columns_nonpredictor)) %>%
# random-value variables
mutate(R1 = runif(n()) ,
R2 = runif(n()) ,
R3 = runif(n()) ) %>%
# matrix
as.matrix(),
label = response_full ,
nrounds = 100 ,
objective = "reg:squarederror" ,
verbose = FALSE ,  # silent
early_stopping_rounds = 5 # stop if no improvement for 10 consecutive trees
)
xgb_screen_importance <- xgb_screen %>%
xgb.importance(model = .) %>%
as_tibble()
# visualization
xgb_screen_importance %>%
mutate(class = ifelse(str_detect(Feature , "R[123]") , "Random" , "Predictor variables")) %>%
# reorder for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# visualization
ggplot(aes(x = Feature , y = Gain , fill = class)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_lancet() +
labs(x = "Variables" , y = "Variable importance (Gain)" , fill = "" ,
title = "Screening of relevant predictor variables" ,
subtitle = sprintf("The variable importance of the gradient boosting machine (%s)" , SAT_product)) +
theme_bw() +
theme(axis.text.y = element_text(size = 4) , legend.position = "bottom")
# exclude not-important variables
included_var <- xgb_screen_importance %>%
filter(Gain > xgb_screen_importance %>%
filter(str_detect(Feature , "R[123]")) %>%
# the max importance of the random-value variables
summarize(Gain = max(Gain)) %>%
unlist) %>%
select(Feature) %>%
unlist %>% unname()
# =====================================
# predictors (as a matrix)
# =====================================
predictor_full <- data_annual %>%
select(all_of(included_var)) %>%
as.matrix()
# //////////////////////////////////////////////////////////////////////////
# final model
# //////////////////////////////////////////////////////////////////////////
# =====================================
# hyperparameters from grid search
# =====================================
hyper_grid <- read_csv("3_results/output-data/model_annual/GBM_grid-search/hyper_evaluation.csv")
hyperparm_final <- hyper_grid %>%
arrange(-CV_R2) %>%
dplyr::slice(1) %>%
select(eta, max_depth, min_child_weight, subsample, colsample_bytree) %>%
as.list()
#  eta max_depth min_child_weight subsample colsample_bytree
#  0.3        10                5      0.65              1.0
nrounds <- 50
# =====================================
# model with the full training set
# =====================================
set.seed(123)
xgb_final_full <- xgboost(
data = predictor_full ,
label = response_full ,
params = hyperparm_final ,
nrounds = nrounds ,
objective = "reg:squarederror" ,
verbose = FALSE ,  # silent
early_stopping_rounds = 10 # stop if no improvement for 10 consecutive trees
)
# conventional CV
for(k in as.factor(1:k_fold)){
# data preparation: partition
training.data <- data_annual %>%
filter(CV != k)
testing.data <- data_annual %>%
filter(CV == k)
# data preparation: make matrix
predictor_train <- training.data %>%
select(all_of(included_var)) %>%
as.matrix()
response_train <- training.data %>%
select(NO2) %>%
as.matrix()
predictor_test <- testing.data %>%
select(all_of(included_var)) %>%
as.matrix()
response_test <- testing.data %>%
select(NO2) %>%
as.matrix()
# define model
set.seed(123)
xgb_train <- xgboost(
data = predictor_train ,
label = response_train ,
params = hyperparm_final ,
nrounds = nrounds ,
objective = "reg:squarederror" ,
verbose = FALSE ,  # silent
early_stopping_rounds = 10 # stop if no improvement for 10 consecutive trees
)
# prediction
prediction_test <- testing.data %>%
select(Station_name , NO2 , Type_of_station , CV) %>%
# prediction
mutate(predicted = predict(xgb_train , predictor_test))
# prediction data.frame
if(as.character(k) == "1"){
xgb_final_prediction_CV <- prediction_test # <-
}else{ # append
xgb_final_prediction_CV <- bind_rows(xgb_final_prediction_CV , prediction_test)
}
# clean environment
rm(xgb_train)
rm(k , training.data , testing.data , predictor_train , predictor_test , response_train , response_test , prediction_test)
}
# spatial CV
for(k in as.factor(1:k_fold)){
# data preparation: partition
training.data <- data_annual %>%
filter(spatial_CV != k)
testing.data <- data_annual %>%
filter(spatial_CV == k)
# data preparation: make matrix
predictor_train <- training.data %>%
select(all_of(included_var)) %>%
as.matrix()
response_train <- training.data %>%
select(NO2) %>%
as.matrix()
predictor_test <- testing.data %>%
select(all_of(included_var)) %>%
as.matrix()
response_test <- testing.data %>%
select(NO2) %>%
as.matrix()
# define model
set.seed(123)
xgb_train <- xgboost(
data = predictor_train ,
label = response_train ,
params = hyperparm_final ,
nrounds = nrounds ,
objective = "reg:squarederror" ,
verbose = FALSE ,  # silent
early_stopping_rounds = 10 # stop if no improvement for 10 consecutive trees
)
# prediction
prediction_test <- testing.data %>%
select(Station_name , NO2 , Type_of_station , spatial_CV) %>%
# prediction
mutate(predicted = predict(xgb_train , predictor_test))
# prediction data.frame
if(as.character(k) == "1"){
xgb_final_prediction_CV_sp <- prediction_test # <-
}else{ # append
xgb_final_prediction_CV_sp <- bind_rows(xgb_final_prediction_CV_sp , prediction_test)
}
# clean environment
rm(xgb_train)
rm(k , training.data , testing.data , predictor_train , predictor_test , response_train , response_test , prediction_test)
}
# combine the prediction of the two CV
xgb_final_prediction_CV <- xgb_final_prediction_CV %>%
left_join(xgb_final_prediction_CV_sp ,
by = c("Station_name" , "NO2" , "Type_of_station") ,
suffix = c("_CV" , "_spatialCV"))
# //////////////////////////////////////////////////////////////////////////
# model evaluation
# //////////////////////////////////////////////////////////////////////////
# =====================================
# observed, predicted, residuals
# =====================================
xgb_final_prediction <- data_annual %>%
select(Station_name , NO2 , Type_of_station , X , Y) %>%
# prediction
mutate(predicted = predict(xgb_final_full , predictor_full)) %>%
# CV-prediction
full_join(xgb_final_prediction_CV ,
by = c("Station_name" , "NO2" , "Type_of_station")) %>%
# residuals
mutate(residual = NO2 - predicted ,
residual_CV = NO2 - predicted_CV ,
residual_spatialCV = NO2 - predicted_spatialCV)
# =====================================
# performance indices
# =====================================
# model performance indices as a data.frame
xgb_final_indices <- xgb_final_prediction %>%
eval_performance_indices()
# =====================================
# variable importance
# =====================================
# Gain: the relative contribution of the corresponding feature to the model
# calculated by taking each feature’s contribution for each tree in the model.
# This is synonymous with gbm’s relative.influence
xgb_final_importance <- xgb_final_full %>%
xgb.importance(model = .)
# =====================================
# visualization
# =====================================
out_dirpath_plots <- sprintf("3_results/output-graph/model_annual/%s" , model_abbr)
if(!dir.exists(out_dirpath_plots)) dir.create(out_dirpath_plots)
# predicted <-> observed
plot_obs_pred(xgb_final_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/obs-pred_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 5 , base_height = 3.5
)
# residual diagnostic plots
plot_resid(xgb_final_prediction , # <-
title_text = sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residuals_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 7.8 , base_height = 6
)
# variable importance
xgb_final_importance %>%
arrange(-Gain) %>%
# re-order for visualization
mutate(Feature = factor(Feature , levels = Feature[order(Gain)])) %>%
# dplyr::slice(1:30) %>%
ggplot(aes(x = Feature , y = Gain)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Variables" , y = "Gain" ,
title = sprintf("GBM variable importance (with %s)" , SAT_product) ,
subtitle = "Gain: the relative contribution of the corresponding \nfeature to the model") +
theme_bw() +
theme(axis.text.y = element_text(size = 6))
save_plot(
sprintf("%s/importance_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 6
)
# =====================================
# spatial autocorrelation of the residuals
# =====================================
moran_df <- eval_resid_moran(xgb_final_prediction)
# visualization
plot_resid_map(xgb_final_prediction , # <-
sprintf("%s (%s)" , str_to_title(model_name) , SAT_product))
save_plot(
sprintf("%s/residual-map_%s_%s.png" , out_dirpath_plots , model_abbr , SAT_product) ,
plot = last_plot() ,
base_width = 6 , base_height = 4
)
# =====================================
# export datasets
# =====================================
{
# export the predicted values
out_dirpath_predicted <- "3_results/output-data/model_annual/observed-predicted"
if(!dir.exists(out_dirpath_predicted)) dir.create(out_dirpath_predicted)
xgb_final_prediction %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_predicted , model_abbr , SAT_product))
# export the model performance indices
out_dirpath_indices <- "3_results/output-data/model_annual/indices"
if(!dir.exists(out_dirpath_indices)) dir.create(out_dirpath_indices)
xgb_final_indices %>% # <-
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_indices , model_abbr , SAT_product))
# Moran's I
out_dirpath_Moran <- "3_results/output-data/model_annual/Moran"
if(!dir.exists(out_dirpath_Moran)) dir.create(out_dirpath_Moran)
moran_df %>%
pivot_longer(cols = everything()) %>%
mutate(model = model_abbr , product = SAT_product) %>%
write_csv(sprintf("%s/%s_%s.csv" , out_dirpath_Moran , model_abbr , SAT_product))
}
# =====================================
# export model
# =====================================
{
out_dirpath_model <- "3_results/output-model/model_annual"
if(!dir.exists(out_dirpath_model)) dir.create(out_dirpath_model)
saveRDS(xgb_final_full , # <-
file = sprintf("%s/%s_%s.rds" , out_dirpath_model , model_abbr , SAT_product))
}

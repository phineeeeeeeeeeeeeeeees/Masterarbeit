# visualization
ggplot(aes(x = DTV_all , y = residual_CV)) +
geom_point(shape = 1) +
geom_smooth() +
scale_x_log10() +
facet_wrap(~model + product) +
labs(title = "The distance from the monitoring sites to the nearest road" ,
x = "meter" ,  y = "Cross-validation residual") +
theme_bw()
model_prediction_road %>%
# re-order for visualization
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
# visualization
ggplot(aes(x = DTV_main , y = residual_CV)) +
geom_point(shape = 1) +
geom_smooth() +
scale_x_log10() +
facet_wrap(~model + product) +
labs(title = "The distance from the monitoring sites to the nearest road" ,
x = "meter" ,  y = "Cross-validation residual") +
theme_bw()
model_prediction_road %>%
# re-order for visualization
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
# visualization
ggplot(aes(x = dist_nearest_mainroad_bysite , y = residual_CV)) +
geom_point(shape = 1) +
geom_smooth() +
scale_x_log10() +
facet_wrap(~model + product) +
labs(title = "The distance from the monitoring sites to the nearest major road" ,
x = "meter" ,  y = "Cross-validation residual") +
theme_bw()
model_prediction_road %>%
# re-order for visualization
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
# visualization
ggplot(aes(x = dist_nearest_mainroad_bysite , y = residual_CV)) +
geom_point(shape = 1) +
geom_smooth() +
scale_x_log10() +
facet_wrap(~model + product) +
labs(title = "The distance from the monitoring sites to the nearest major road" ,
subtitle = "Annual models" ,
x = "meter" ,  y = "Cross-validation residual") +
theme_bw()
model_compare_tidy
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(value = ifelse(if_any(c(min,max) , is.na) ,
value ,
sprintf("%s (%s~%s)" , value , min , max))) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
arrange(model , product) %>%
# re-order columns
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
# export the tidy table
model_compare_tidy %>%
write_csv("3_results/output-data/model_annual/model_annual_indices.csv")
model_indices
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(value = ifelse(if_any(c(min,max) , is.na) ,
value ,
sprintf("%s (%s~%s)" , value , min , max))) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
arrange(model , product)
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(value = ifelse(if_any(c(min,max) , is.na) ,
value ,
sprintf("%s (%s~%s)" , value , min , max))) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
arrange(model , product) %>%
# re-order columns
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept ,
spatialCV_R2 , spatialCV_RMSE , spatialCV_slope , spatialCV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
model_compare_tidy
# export the tidy table
model_compare_tidy %>%
write_csv("3_results/output-data/model_annual/model_annual_indices.csv")
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI"))
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI")) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_1.csv")
# tidy table with slope and intercept
model_compare_tidy %>%
select(model , product ,
training_slope , training_intercept ,
CV_slope , CV_intercept ,
spatialCV_slope , spatialCV_intercept) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_2.csv")
?glue::glue_data
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max)
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
glue::glue_data("{value} ({min}~{max})")
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
glue::glue_data("{value} ({min}~{max})" , .trim = FALSE)
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , format , digits = 3))
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
mutate(across(c(value , min , max) , format , digits = 3))
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
mutate(across(c(value , min , max) , format , digits = 3)) %>%
glue::glue_data("{value} ({min}~{max})" , .trim = FALSE)
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
mutate(across(c(value , min , max) , format , digits = 3)) %>%
glue::glue_data("{value} ({min}~{max})" , .trim = TRUE)
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = ifelse(if_any(c(min,max) , is.na) ,
value ,
glue::glue_data("{value} ({min}~{max})")))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = ifelse("    NA" %in% c(min,max) ,
value ,
glue::glue_data("{value} ({min}~{max})")))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = ifelse(min == "    NA" ,
value ,
glue::glue_data("{value} ({min}~{max})")))
# =====================================
# model performance indices
# tidy table for presentation and paper
# =====================================
model_indices %>%
select(value , min , max) %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
mutate(across(c(value , min , max) , format , digits = 3)) %>%
glue::glue_data("{value} ({min}~{max})")
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
glue::glue_data("{value} ({min}~{max})")
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = glue::glue_data("{value} ({min}~{max})") )
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") )
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = ifelse(min == "    NA" ,
value ,
glue::glue_data(. , "{value} ({min}~{max})")))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>% , names_sep = "_" , values_from = value) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") )
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})" , .trim = TRUE))
?format
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})"))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("(NA~NA)"))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\(NA~NA\)"))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)"))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("(NA~NA)" %>% str_trim()))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)"))
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim())
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim()) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept ,
spatialCV_R2 , spatialCV_RMSE , spatialCV_slope , spatialCV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
# export the tidy table
model_compare_tidy %>%
write_csv("3_results/output-data/model_annual/model_annual_indices.csv")
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI")) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_1.csv")
# tidy table with slope and intercept
model_compare_tidy %>%
select(model , product ,
training_slope , training_intercept ,
CV_slope , CV_intercept ,
spatialCV_slope , spatialCV_intercept) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_2.csv")
model_compare_tidy
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim())
model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim()) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value)
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim()) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
arrange(model , product) %>%
# re-order columns
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
model_compare_tidy
# export the tidy table
model_compare_tidy %>%
write_csv("3_results/output-data/model_annual/model_annual_indices.csv")
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI")) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_1.csv")
# tidy table with slope and intercept
model_compare_tidy %>%
select(model , product ,
training_slope , training_intercept ,
CV_slope , CV_intercept ,
spatialCV_slope , spatialCV_intercept) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_2.csv")
model_compare_tidy <- model_indices %>%
# round values
mutate(across(c(value , min , max) , round , 3)) %>%
# value format: with ranges
mutate(across(c(value , min , max) , format , trim = TRUE , digits = 3)) %>%
mutate(value = glue::glue_data(. , "{value} ({min}~{max})") %>%
str_remove_all("\\(NA~NA\\)") %>% str_trim()) %>%
# re-order columns
select(model , product , type , name , value) %>%
pivot_wider(names_from = c(type , name) , names_sep = "_" , values_from = value) %>%
# re-order rows
mutate(model = factor(model , levels = c("SLR" , "GWR" , "RF" , "GBM" , "NN")) ,
product = factor(product , levels = c("spatial" , "OMI" , "TROPOMI"))) %>%
arrange(model , product) %>%
# re-order columns
select(model , product ,
training_R2 , training_RMSE , training_slope , training_intercept ,
CV_R2 , CV_RMSE , CV_slope , CV_intercept ,
spatialCV_R2 , spatialCV_RMSE , spatialCV_slope , spatialCV_intercept) %>%
# Moran's I
left_join(
model_moran %>%
pivot_wider(names_from = name , values_from = value) %>%
rename(MoransI = Moran_I_statistic ,
MoransI.p = p) %>%
select(-Expectation , -Variance) ,
by = c("model" , "product")
) %>%
# round values (Morans's I)
mutate(across(starts_with("MoransI") , round , 3))
# export the tidy table
model_compare_tidy %>%
write_csv("3_results/output-data/model_annual/model_annual_indices.csv")
# tidy table with R2, RMSE, Moran's I
model_compare_tidy %>%
select(model , product ,
training_R2 , training_RMSE ,
CV_R2 , CV_RMSE ,
spatialCV_R2 , spatialCV_RMSE , starts_with("MoransI")) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_1.csv")
# tidy table with slope and intercept
model_compare_tidy %>%
select(model , product ,
training_slope , training_intercept ,
CV_slope , CV_intercept ,
spatialCV_slope , spatialCV_intercept) %>%
write_csv("3_results/output-data/model_annual/model_annual_indices_2.csv")
citation()
system()
Sys.info()
?Sys.info
citation("stars")
citation("raster")
